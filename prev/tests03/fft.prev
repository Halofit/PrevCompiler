
(iter = 0,
while iter < 1024:
	orig[i] = iter
end,
fft(@orig, 1024, @result)
	
)where
	var iter: integer
	var orig:   arr[1024] cplx_t
	var result: arr[1024] cplx_t
end
where

	#fraction & complex type
	typ fract_t : rec{num: integer, den: integer}
	typ cplx_t : rec{real: fract_t, imag: fract_t}
	
	#gcd function is required for fractions
	fun gcd(a : integer, b : integer) : integer = 
		if a==0 then
			b 
		else
			gcd (b%a, a)
		end
	
	fun make_fract(a: integer, b:integer): fract_t = (
		r.num = a,
		r.den = b,
		r
	) where var r:fract_t end

	fun fraction(a: integer, b:integer):fract_t = make_fract(a,b)
	fun ifraction(a: integer) :fract_t = make_fract(a,1)

	fun negate(a: fract_t): fract_t = (
		r.num = -a.num,
		r.den = a.den,
		r
	) where var r:fract_t end

	fun invert(a: fract_t): fract_t = (
		r.num = a.den,
		r.den = a.num,
		r
	) where var r:fract_t end

	#simplify fract_tion to its simplest form
	fun fract_simplify(a : fract_t) : fract_t = (
		cd = gcd(a.num, a.den),
		r.num = a.num / cd,
		r.den = a.den / cd,
		r
	) where 
		var cd: integer
		var r:fract_t 
	end
	

	fun fract_mul(a:fract_t, b:int): fract_t = (
		r.num = a.num * b.num,
		r.den = a.den * b.den,
		r
	) where 
		var r:fract_t 
	end
	
	fun fract_imul(a:fract_t, b:fract_t): fract_t = (
		r.num = a.num * b.num,
		r.den = a.den * b.den,
		r
	) where 
		var r:fract_t 
	end
	
	fun fract_add(a:fract_t, b:fract_t): fract_t=(
		r.num = (a.num * b.den) + (b.num * a.den),
		r.den = a.den * b.den,
		r
	)where
		var r:fract_t
	end

	fun fract_sub(a:fract_t, b:fract_t): fract_t= fract_add(a,negate(b))
	
	fun make_cplx(r:fract_t, i:fract_t): cplx_t = (
		r.real = r,
		r.imag = i,
		r
	) where var r:cplx_t end

	fun complex(r:fract_t, i:fract_t): cplx_t = make_cplx(r,i)
	fun const_i(): cplx_t = make_cplx(ifraction(0),ifraction(1))

	fun cplx_add(a:cplx_t, b:cplx_t): cplx_t = (
		r.real = fract_add(a.real, b.real),
		r.imag = fract_add(a.imag, b.imag),
		r
	) where 
		var r:cplx_t
	end
	
	fun cplx_add(a:cplx_t, b:cplx_t): cplx_t = (
		r.real = fract_sub(a.real, b.real),
		r.imag = fract_sub(a.imag, b.imag),
		r
	) where 
		var r:cplx_t
	end

	fun cplx_mult(a:cplx_t, b:cplx_t): cplx_t = (
		r.real = fract_sub(fract_mul(a.real, b.real), fract_mul(a.imag, b.imag)),
		r.imag = fract_sub(fract_mul(a.real, b.imag), fract_mul(a.real, b.imag)),
		r
	) where 
		var r:imag
	end	

	fun pow(base: integer, exponent: integer) : integer = 
		if exponent == 1 then
			0
		else
			base * pow(base, exponent-1)
		end

	fun fract_pow(base: fract_t, exponent: integer) : integer = 
		if exponent == 1 then
			fraction(1,0)
		else
			fract_simplify(fract_mul(base, fract_pow(base, exponent-1)))
		end
		


	fun factorial(n : integer) : integer = 
		if n == 0 then 
			1
		else 
			n * factorial(n-1) 
		end

	fun sin(x : fract_t) : fract_t = (
		r = x,
		r = fract_simplify(fract_sub(r, fraction(fract_pow(x,3), factorial(3)))),
		r = fract_simplify(fract_add(r, fraction(fract_pow(x,5), factorial(5)))),
		r = fract_simplify(fract_sub(r, fraction(fract_pow(x,7), factorial(7)))), # 4th order taylor series sum around zero
		fract_simplify(r)
	) where var r : fract_t end

	fun cos(x : fract_t) : fract_t = (
		r = 1,
		r = fract_simplify(fract_sub(r, fraction(fract_pow(x,2), factorial(2)))),
		r = fract_simplify(fract_add(r, fraction(fract_pow(x,4), factorial(4)))),
		r = fract_simplify(fract_sub(r, fraction(fract_pow(x,6), factorial(6)))), # 4th order taylor series sum around zero
		fract_simplify(r)
	) where var r : fract_t end

	fun exp(x : cplx_t) : cplx_t = complex(cos(x.imag), sin(x.imag)) # e^ix = cos(x) + i*sin(x), euler identity

	fun fft(a: ptr cplx_t, len: integer, res: ptr cplx_t) : void = 
		if len == 1 then
			res^ = a^ # res[0] = a[0] , I'm not sure if arr indexing ptr types works
		else (
			i = 0,
			omega_n = exp(complex(0, fraction(fract_imul(fraction(22,7),2), len))), # e^(i2pi/n)
			omega = cplx_t(ifraction(1), ifraction(0)),

			while i < len : (
				even[i/2] = (a+i)^,
				odd [i/2] = (a+i+1)^,
				i = i+2
			)end,

			fft(@even, len/2, @resultA),
			fft(@even, len/2, @resultB),

			i = 0,
			while i < len/2:(
				#fft butterflies (yay)
				(res + i)^         = cplx_add((resultA + i)^, cplx_mult((resultB + i)^, omega)),
				(res + i + len/2)^ = cplx_sub((resultA + i)^, cplx_mult((resultB + i)^, omega)),
				omega = cplx_mul(omega, omega_n),
				#renormalise results, to prevent overflows
				(res + i)^ = fract_simplify((res + i)^),
				(res + i + len/2)^ = fract_simplify((res + i + len/2)^),
				omega = fract_simplify(omega)
			)end,

			none
		) end

	where
		var i : integer

		var omega_n : cplx_t
		var omega : cplx_t

		var even : arr[len/2] cplx_t
		var odd  : arr[len/2] cplx_t
		var resultA : arr[len/2] cplx_t
		var resultB : arr[len/2] cplx_t
	end
end